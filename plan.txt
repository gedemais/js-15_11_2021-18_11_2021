Jour 1
________________________________________________________________________________
Introduction:

	Un langage pour le Web:

		Js est l'une des trois pierres angulaires du web a l'heure actuelle, avec
		HTML et CSS. Ce langage comporte de nombreux frameworks et librairies,
		ce qui le rend tres complet. Adapte a la fois pour des utilisations en
		back et en front, sa polyvalence le propulse parmis les langages les plus utilises au monde.


	Historique de JavaScript:

		La premiere version de javascript a ete creee par Brendan Eich, puis presentee en 1995. Le langage connait depuis
		des mises a jour regulieres. Jusqu'en juin 2015 (jquery time), la version de javascript actuelle etait appelee ES5
		(ES pour ECMAScript, un ensemble de normes appliquees a des langages de scripting web, dont js).
		A partir de Juin 2015, js est passe est a ES6, et a developpe de nouvelles versions tous les ans avec
		ES7, ES8, etc... La version stable et actuellement utilisee de js est ES12 (sortie en juin 2021).


	Les librairies JavaScript et l'écosystème:

		En 2004, le nouveau navigateur Firefox (Fondation Mozilla) fait son
		apparition, et se presente comme une alternative a Internet Explorer.
		De nouveaux besoins de compatibilite sont necessaires aux programmeurs,
		entrainant la creation de standards entre les differents navigateurs web.

		Ici commence l'essor de JavaScript, qui developpe de nombreux frameworks
		et librairies, permettant aux developpeurs de gerer les bugs et les
		incompatibilites de maniere transparente. Parmis ces frameworks, on trouve
		notamment jQuery, une API permettant aux developpeurs web de rediger des
		scripts cote client (page HTML), sans se soucier des differentes
		incompatibilites ou bugs entre les differents navigateurs sur lesquels
		ces scripts s'executeront.

		Mais les frameworks de JavaScript ne s'arreteront pas a regler les
		problemes de compatibilite pour les developpeurs. Suite a cet essor,
		de nombreux frameworks js ont fait leur apparition. Parmis les plus utilises :

			- Angular, developpe par Google en 2016, est un framework compatible sur une
				grande variete de navigateurs, permettant de creer des SPA (Single
				Page Application). Ce framework est extremement populaire.

			- React, developpe par Facebook, a connu un succes fulgurant a partir de 2014.
				Ce framework est utilise pour creer des interfaces utilisateur sur les pages
				web recevant un grand nombre de visites.
				A l'instar d'Angular, il est open-source et tres populaire.

			- Vue, cree par Evan You en 2014, est un framework front-end,
				permettant comme Angular de creer des SPA, ainsi que des interface
				utilisateurs et des web-applications.

			Ces trois frameworks ont l'avantage d'etre open-source, ce qui veut
			dire que n'importe quel membre de la communaute peut acceder au code
			et y proposer des changements, et que n'importe quel developpeur peut
			rejoindre cette communaute, a condition de participer de maniere active
			et pertinente au projet.


	Quelques uns des meilleurs IDE actuels:

		Definition d'IDE (Edition de texte, git-support, tasks planning, teamwork features...)
		- VS (Dev par Microsoft, l'un des meilleurs IDE pour le web de maniere G)
		- VSCode (Version gratuite de VS, lightweight mais quelques features en moins)
		- Atom (Dev par Github, soutenu et utilise par Facebook. git-support excellent, editeur minimaliste mais assez configurable)
		- Vim (Cree en 1976, version improved sortie en 1991, neo-improved en 2014. Open-Source, ameliorations constantes, communautes actives).


	Structuration typique d'une page Web, où placer le JavaScript ?

		Intro HTML5 CSS3 si besoin
		Un site web est generalement compose d'une ou plusieurs pages HTML, et de fichiers CSS associes a ces pages.
		La balise <script> appelant du code en JavaScript peut etre positionnee.
		n'importe ou sur la page, dans les balises <head>, <body>, et <footer>
		en fonction de quand le script a besoin d'etre execute (si il necessite
		certains elements sur la page, l'appel au script doit se faire apres leur declaration).

________________________________________________________________________________
Premiers examples de js:

	Différentes façons d'intégrer JavaScript a un projet:
		Le JavaScript peut etre utilise dans une page web de trois manieres principales:
			- Ecrire le code directement dans une balise <script> dans le fichier HTML.
			- Renseigner un chemin vers un fichier contenant le code source en JavaScript.
			- Ecrire le code dans un attribut de balise HTML prevu pour lancer un script js a partir d'un evenement.
		A noter que la premiere methode est generalement assez peu pratique pour maintenir un code HTML lisible.


	Création d'une page typique utilisant JavaScript :
		Introduction a l'exercice_0

________________________________________________________________________________
Premieres notions de js:

	Bases du langage
		Le js est un langage dit multi-paradigmes (programmation fonctionnelle, POO, heritage prototypique)
		Explication des differents paradigmes combines par js.

	Exemple de syntaxe de base
		example linking

	Déclarations et portées des données
		example variables

	var et let, portée des données
		example variables_types

	Types de données, conversions et affectations
		example conversions
		example arrays

	Structures de contrôle
		example conditions

	Boucles
		example boucles

	Types de données JSON
		example object

	Pièges du typage dynamique
		example pieges_typage

	L'objet "console"
		example console

	Premier projet simple sur l'utilisation des bases de JavaScript
	Déclarations de variables et utilisation
	Boucles, tests et affichages
		calculatrice


	Un langage à base de fonctions:
		Le JavaScript, comme beaucoup de langages, permet de declarer des fonctions.
		Une fonction (au sens informatique du terme) est une suite d'instructions
		encapsulees dans une zone precise, portant un nom precis, grace au quel
		cette suite peut etre executee depuis n'importe ou. Une fonction peut
		prendre un/plusieurs parametres, a savoir des objets grace aux quels elle
		pourra effectuer son travail. Une fonction peut egalement retourner un
		resultat suite a ses instructions.

		example libc

	La fonction, un élément de base du langage
		Dans la majorite des script js, les instructions sont divisees en plusieurs
		fonctions ayant chacunes des taches precises a effectuer, afin de construire
		une architecture fonctionnelle. Le concept de fonction est central en js,
		comme c'est le cas pour une majorite des langages de programmation.

	Constructeurs et "this":
		Nous avons precedemment vu comment creer un objet (book). Cependant, cet
		objet etait unique et ne pouvait pas etre duplique pour stocker les informations
		de plusieurs livres, a moins de declarer plusieurs instances de l'objet
		en question. Imaginez maintenant que l'on tienne une bibliotheque, et
		qu'il faille declarer un nouvel objet book dans le code pour chaque nouveau livre...

		Heureusement, les fonctions constructeurs sont la pour nous aider !
		Elles permettent de declarer un objet a partir d'une fonction, ce qui facilite
		sa creation.

	Valeur de "this":
		Dans une fonction constructeur, "this" designe l'objet cree par la fonction.
		On peut donc assigner des attributs (sous-variables) a this, et leur donner les valeurs
		desirees pour notre objet, en les passant en parametre du constructeur.

		Maintenant que la notion de fonction vous a ete introduite,
		il faut savoir qu'un objet peut egalement contenir des fonctions.
		Dans ce cas, on appelle ces fonctions les "methodes" de l'objet.
		On peut appeler n'importe quel methode d'un objet, tant que son instance est
		disponible, et que l'on peut fournir a ces methodes les parametres necessaires.

		example constructor.js

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

Jour 2

	operateur de comparaison !==

	exercices objets (cylinder & clock)

	Fonctions immédiates et anonymes:
		Comme vous l'avez probablement remarque, il n'est pas obligatoire de nommer
		une fonction quand on la declare en js. Les fonctions sans nom sont appelees
		fonctions anonymes, et sont la plupart du temps renseignees sous forme
		d'expressions, et non declarees comme des fonctions classiques.

	Les fonctions fléchées:
		example arrow_function

	Exercice rec.


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

Les outils du navigateur:
https://developer.mozilla.org/fr/docs/Learn/Common_questions/What_are_browser_developer_tools


Regexps:
cheatsheet : https://ufrsciencestech.u-bourgogne.fr/master1/Multimedia/TD/TD5_Expr_reg_JS.pdf
exercices : https://www.w3resource.com/javascript-exercises/javascript-regexp-exercises.php

Tests unitaires JavaScript

Jour 3

Objet "window" ou le contexte global:
	L'objet window represente la fenetre ouverte dans le navigateur. Cet
	objet comporte plusieurs attributs, dont une appelee document. Il s'agit
	d'une reference vers le document contenu dans window, a savoir notre page
	web. L'objet document est accessible par defaut en JavaScript, et permet
	d'influer sur la composition de la page, et sur les donnees que ses briques utilisent.
	Cet objet document joue donc un role cle lorsque l'on souhaite utiliser
	javascript pour rendre une page dynamique.

Contextes d'exécution:
	Les contextes d'executions sont des informations permettant au navigateur
	de se reperer dans l'execution du code source de la page. Ils sont stockes
	sous la forme d'une pile, contenant toujours au moins un element, appele
	contexte "global".

Document Object Model (DOM)
Les objets du navigateur
Récupérer des éléments
Ajouter des balises
Modifier les contenus
Manipulation des CSS
Gestion des évènements
L'objet "event" et son utilisation
Parcours du DOM
Modification du DOM, suppression et création d'éléments
Exemples de travaux pratiques (à titre indicatif)
Projet de manipulation des objets d'une feuille HTML 5
Parcours, extraction des contenus et attributs
Modification, insertion et suppression d'éléments
Gestion de formulaires avec JavaScript
Gérer le contenu des formulaires
Accès aux différents éléments
Gestion de la validation des données de formulaires
Ecrire un gestionnaire de formulaires
Exemples de travaux pratiques (à titre indicatif)
Extraction des données d'un formulaire et contrôle des valeurs
Validation des champs de saisie
Conception d'un gestionnaire de saisie de formulaire
Gérer les CSS depuis JavaScript
Rappel succinct de CSS
Les objets et propriétés importantes
Accéder en écriture et lecture à CSS
Exemples de travaux pratiques (à titre indicatif)
Lecture de styles CSS depuis JavaScript
Application de nouveaux styles CSS avec JavaScript

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

Jour 4
Ajax
Architecture des sites Web avec et sans Ajax
Asynchronisme dans le navigateur
XMLHttpRequest et HTML 5
Gestion d'erreurs et timeout
Exemples de travaux pratiques (à titre indicatif)
Ecriture d'un projet qui récupère les données d'un serveur
Les afficher sur une feuille avec Ajax et JSON
Remplacement de diverses écritures réalisées par des appels à des fonctions jQuery

jQuery ++


Nouveautés ECMAScript 6 à 11
L'apport majeur de la version 6 (2015) de JavaScript
Les autres apports
Avantages liés pour le programmeur
